import{_ as n,o as s,c as a,e as t}from"./app-Cjbxsi1x.js";const e={},o=t(`<h3 id="_05-fri" tabindex="-1"><a class="header-anchor" href="#_05-fri"><span>05 - Fri</span></a></h3><p>I cant believe it, I am back.</p><ul><li>A lot of stuff happened. What I am hopping to do is to take the largest share of advantage from the point I am in right now. And focus to learn and improve on the areas that appear to most significantly tbe improving upon my career. I gonna also make sure that the Mastery system is or will be also improved to the point I can confintly run the practce problems.</li></ul><h3 id="_5-todo" tabindex="-1"><a class="header-anchor" href="#_5-todo"><span>5.todo</span></a></h3><ul><li>[x] 5.1 Improving Mastery System.</li><li>[x] 5.2 Identifying the co-beneffited areas</li><li>[x] 5.3 Identifying what are the procedures to follow for the mastery of each item.</li><li>[x] 5.4 How about the long term web design objectives?</li><li>[x] 5.5 Working on designing the Jupyter Notebook series practice</li><li>[ ] 5.6 Start designing the project to record the presentation practicing project</li></ul><h3 id="_5-2-identifying-the-co-beneffited-areas" tabindex="-1"><a class="header-anchor" href="#_5-2-identifying-the-co-beneffited-areas"><span>5.2 Identifying the co-beneffited areas</span></a></h3><ul><li><p>[ ] What are the areas that are good for my career and perphaps might appear on the future current job description or dailies?</p></li><li><p>[ ] Rank in which order to run the probabilities of them.</p></li><li><p>[ ] 1. Managing a Team</p></li><li><p>[ ] 2. AWS</p></li><li><p>[ ] 3. Ai</p><ul><li>[ ] 3.1. Machine Learning for predicting patterns.</li><li>[ ] 3.2 Language Processing.</li></ul></li><li><p>[ ] 4. Data Structures and Algorithms.</p></li><li><p>[ ] 5. Designing Systems and Architecture Design</p><ul><li>[ ] 5.1 Database Design</li><li>[ ] 5.2 System Design</li><li>[ ] 5.3 AWS Architecture Design</li></ul></li><li><p>[ ] 6. TDD</p><ul><li>[ ] Test Kit Best practices.</li></ul></li><li><p>[ ] 7. Recognition patterns</p></li></ul><h3 id="_5-1-improving-the-mastery-system" tabindex="-1"><a class="header-anchor" href="#_5-1-improving-the-mastery-system"><span>5.1 Improving the Mastery System</span></a></h3><ul><li><p>[ ] Adding default disabled flags for math and non terminology problems.</p></li><li><p>[ ] So now it will require the <code>--all</code> flag if the dsa problem is to be desired. This is so that the optimiazation</p></li><li><p>This fixture requires for the flags</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>
<span class="token keyword">if</span> <span class="token punctuation">(</span>flags<span class="token punctuation">.</span>all<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> problem_response <span class="token operator">=</span> <span class="token keyword">await</span> dsaTrainer<span class="token punctuation">.</span><span class="token function">showMenuOfProblems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">updateAlgorithmPerformance</span><span class="token punctuation">(</span>problem_response<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> problem_response <span class="token operator">=</span> <span class="token keyword">await</span> dsaTrainer<span class="token punctuation">.</span><span class="token function">showRecommendedProblems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">updateAlgorithmPerformance</span><span class="token punctuation">(</span>problem_response<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-identifying-what-are-the-procedures-to-follow-for-the-mastery-of-each-item" tabindex="-1"><a class="header-anchor" href="#_5-3-identifying-what-are-the-procedures-to-follow-for-the-mastery-of-each-item"><span>5.3 Identifying what are the procedures to follow for the mastery of each item.</span></a></h3><p><strong>Practices Related Areas</strong></p><p><em>Here are areas that require the intended practice on the daily, such as running algorithms and practicing AI Modeling using some data Science Library.</em></p><p><strong>Best Practices Knowledge Areas</strong></p><p>*Here is a matter of practicign with the daily commits. *</p><ul><li>I am in fact considering removing data structures practices from the random problems because they bring those problems of slowering work.</li><li>And also deleting the math problems as they dont belong to the opportunity for daily practice. Most of them are just basic computing does it make sense to have them there? The only reasonable ones are the ones running with discrete math inside of them. (Including probability?)</li><li>As for Data Strucutre + Practice problems what I am hoping to have is that whenever you are coming back in train or in the train your practice should focus on the areas closer to the requried &quot;practice areas&quot;: this can be done by having the dsa practice challange being requested at the end of the day, and either practice for ANKI or for CSE or for CSJ: Continues Sequence Jupyter where you have distinct problems for data Jupyter Notebooks AI related problems.</li></ul><p><strong>Mantainanace Areas</strong></p><p><strong>Things to be practiced at home</strong></p><ul><li>Well then at home you shall do tutorials.</li><li>.net projects</li><li>Freelance projects etc.</li><li>Building Portfolio Projects</li></ul><h3 id="_5-4-how-about-the-long-term-web-design-objectives" tabindex="-1"><a class="header-anchor" href="#_5-4-how-about-the-long-term-web-design-objectives"><span>5.4 How about the long term web design objectives?</span></a></h3><p>They shall contain the following since some skills are better shown with some proofs</p><p>For Abstract skills such as AI and AWS they shall be shown throgh certificates:</p><ul><li>AWS Certificte: EMR + redshift + Snowflake</li><li>Google Tensorflow Certificate</li><li>Azure Certificate</li></ul><p>While others shall be show with the actual projects for them:</p><ul><li>.net</li><li>Spring</li></ul><p>Those two are actually the largest one bothering me.</p><p>Kind of nonsenseless.</p><p>Here how the other habits shall be split for</p><h4 id="habits-that-should-be-done-on-the-daily-basis" tabindex="-1"><a class="header-anchor" href="#habits-that-should-be-done-on-the-daily-basis"><span>Habits that should be done on the daily basis</span></a></h4><p><strong>Practice English on the daily basis</strong></p><p>This can be broken down on the following habits:</p><ul><li>Do a research Short with 30 minutes and 5 minutes presentation for random topics</li></ul><p><strong>Applying everyday for programs</strong></p><ul><li>This gets harder as you might have to be away of work to interview.</li><li>This can be done while doing other stuff like going to gyb</li></ul><p><strong>Working out everyday</strong></p><ul><li>This can be done by watching series while working out. As far as I am aware is a very effective method.</li></ul><h3 id="todays-and-this-weekends-plan-of-actions" tabindex="-1"><a class="header-anchor" href="#todays-and-this-weekends-plan-of-actions"><span>Todays and this weekends plan of actions:</span></a></h3><ul><li>Continue working on ALL projects this includes (portfolio, and Prometheus and Freelance Sister)</li></ul><p>These should be the habits to be added:</p><ul><li>Work</li><li>Have 1 series + trainning</li><li>Have 2 blocks of Projects</li></ul><p><strong>Ideally at work</strong></p><ul><li>if there is work to do, complete your work.</li><li>Otherwise take advantage to ontinue improving your personal tools. (Never do tutorials as it looks bad)</li><li>If no motivation whatsoever follow cses and jses routines.</li></ul><h3 id="_5-5-working-on-designing-the-jupyter-notebook-series-practice" tabindex="-1"><a class="header-anchor" href="#_5-5-working-on-designing-the-jupyter-notebook-series-practice"><span>5.5 Working on designing the Jupyter Notebook series practice</span></a></h3><ul><li>It opens and now copies the file direction to the clipboard, but what we want from it is to copy it&#39;s content to a raw file that should be used as temp for solving it.</li></ul><ol><li>Copy raw file</li></ol><p>Lets check how this is done:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> populate_problem <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
populate_with_cloze_filepath <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> base <span class="token operator">=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>populate_problem<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>populate_with_cloze_filepath <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>problems_manager<span class="token punctuation">.</span><span class="token function">populateTemplate</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">file_path</span><span class="token operator">:</span> populate_with_cloze_filepath <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">base</span><span class="token operator">:</span> base <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>problems_manager<span class="token punctuation">.</span><span class="token function">populateTemplate</span><span class="token punctuation">(</span>problem<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>base <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">copyFileToTemp</span><span class="token punctuation">(</span>problem<span class="token punctuation">.</span>file_path<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">base</span><span class="token operator">:</span> base <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">copyFileToTemp</span><span class="token punctuation">(</span>problem<span class="token punctuation">.</span>file_path<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is what we want to copy from:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="dsa-cli/problems-manager.js"><pre class="language-javascript"><code>

<span class="token doc-comment comment">/**
 * Copies the file from problem_file_path to the temp_problem_filepath.
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>str<span class="token punctuation">}</span></span> <span class="token parameter">problem_file_path</span> The path to the file to copy
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>str<span class="token punctuation">}</span></span> <span class="token parameter">base</span> The path to the file to copy from e.g. base_code&#39;
 */</span>
<span class="token function">copyFileToTemp</span><span class="token punctuation">(</span>problem_file_path<span class="token punctuation">,</span> <span class="token punctuation">{</span> base <span class="token operator">=</span> <span class="token string">&quot;./base_code/&quot;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// console.log(&quot;Copying file from&quot;, problem_file_path, &quot;to&quot;, this.temp_problem_filepath)</span>
        <span class="token keyword">const</span> absolute_problem_file_path <span class="token operator">=</span> <span class="token function">getDirAbsoluteUri</span><span class="token punctuation">(</span>problem_file_path<span class="token punctuation">,</span> base<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> absolute_temp_file_path <span class="token operator">=</span> <span class="token function">getDirAbsoluteUri</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>temp_problem_filepath<span class="token punctuation">,</span> <span class="token string">&quot;./&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment">// console.log(&quot;Opening file: &quot; + absolute_problem_file_path, &quot;from source,&quot;, problem_file_path);</span>
        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>absolute_problem_file_path<span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>

                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span>
            <span class="token punctuation">}</span>

            fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>absolute_temp_file_path<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
                    <span class="token keyword">return</span> <span class="token boolean">false</span>
                <span class="token punctuation">}</span><span class="token punctuation">;</span>

            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You read the file and then you write it to make it work just fine.</p><h2 id="_5-6-start-designing-the-project-to-record-the-presentation-practicing-project" tabindex="-1"><a class="header-anchor" href="#_5-6-start-designing-the-project-to-record-the-presentation-practicing-project"><span>5.6 Start designing the project to record the presentation practicing project</span></a></h2><p>I know that the design features includes:</p><ul><li>[x] 1. A way to record the presentation</li><li>[x] 2. Storing of the presentations</li><li>[x] 3. A way to play the presentation</li><li>[x] 4. A way to play the presentation with the timer</li></ul><p>What I want to focus on now is the random presentation generator, and the architecture to store the presentations. (either as a file or as on the database.)</p><p>How to create a quick prototype for it?</p><ul><li>Using Youtube to upload the video. Which can be uploaded as a private link. Then just store the private link key on the database. That should be enough.</li></ul><p>Lets create an actual prototype for this:</p><p>As for the database I can use something I had already been using. Finally enoguh that can just be the prototype which meanss you would be instead in charge of the following:</p><ul><li>[x] Developing a timer</li><li>[x] Developing a randomizer of prompts as a Rogue Like where the user can choose</li><li>[x] Finished Recording Time</li></ul><p>Features of the Video Memory:</p><ul><li>which topic it belongs to</li><li>How long?</li><li>Grade</li><li>Which user belongs to.</li><li>Time that took required for preparing</li><li>When it was being selected (start_ch_time)</li></ul><p>Should there be an option for going over these again?</p><p>Topic Features</p><ul><li>Title</li><li>Difficulty</li><li>Expected preparation time</li><li>Categories: e.g. business etc</li></ul><p>I am thinking of straight adding the strings instead? so there are no borig joins. but I agree that still needed.</p><p>Also category</p><p>https://app.diagrams.net/#G1dBLbwRWmtB2V1uJhricZBCyXAEZr1rLU</p><p>The problem with this competition is that you are expected to act honorifically and record and upload exactly during the expected period.</p><p>Now tht we have the basic designs we shoudl start developig the ste. As for stacks, I am thinking of using such as:</p><ul><li>React + Python for backend.</li></ul><h3 id="designing-the-trello-cards-built-site" tabindex="-1"><a class="header-anchor" href="#designing-the-trello-cards-built-site"><span>Designing the Trello Cards Built Site</span></a></h3><ul><li><p>[x] This optimization however requires of a redesign of the homepage also for the individual productivity</p></li><li><p>At the end of the day it should count the amount of cards completed</p></li></ul><h3 id="design-page-for-your-own-performance-section" tabindex="-1"><a class="header-anchor" href="#design-page-for-your-own-performance-section"><span>Design Page for Your own Performance Section</span></a></h3><p>Features</p><ul><li>[ ] It should encourage the following habits: <ul><li>[ ] 2 blocks Focusmate Completed - From API</li><li>[ ] At least some algorithms being done - from Own API</li><li>[ ] At least 3 Trello Cards Completed. - From Trello Automation API.</li></ul></li></ul><p>Other habits that would be nice to have marked as well:</p><ul><li>Upload of daily Presentation Practice video.</li><li>Somehow know whenever I have my workout done.</li></ul><p>This includes what might be as a video for</p><p>What to display?</p><p>*The objective is to get work done by constantly having a place where to checkup on. This can be a heatmap, or because of the self encouragement of the *</p><ul><li>What days have we been running work on? (like the last 3)</li><li>There has to be a way so that it is integrated on the daily routine from</li></ul><h2 id="_8th-monday" tabindex="-1"><a class="header-anchor" href="#_8th-monday"><span>8th - Monday</span></a></h2><h3 id="_8-todo" tabindex="-1"><a class="header-anchor" href="#_8-todo"><span>8.todo</span></a></h3><ul><li>[x] 8.1 Evuating Journaling system</li><li>[x] 8.2 Adding the X whenever is Negative to signify that it has already been done</li><li>[ ] 8.3 Developing the actual Journaling System.</li><li>[ ] 8.4 Designing and Developing the</li></ul><h3 id="_8-1-evuating-journaling-system" tabindex="-1"><a class="header-anchor" href="#_8-1-evuating-journaling-system"><span>8.1 Evuating Journaling system</span></a></h3><ul><li>The idea is to have a system whereas you can enter and focus what to do and what is your objective you want to obsess with by the end of the year. What do you want in <code>365</code> days?</li></ul><p>Definitevely if you want to get a more p*</p><ul><li>More Fluent English</li><li>Amazing Portfolio</li></ul><p>Those are the things you want to obsess over with.</p><p>Whats the technical challange you are aiming to achieve?</p><p>These are all projects that can be achieved throught the already work being done.</p><ul><li>Data Science Project =&gt; Create 30 minutes presentations about a pcertain case.</li><li>Data Strucutres Project =&gt;</li><li>Flutter Project =&gt; Publish your own app there.</li><li>IOS + Android Project</li><li>Interesting React Project containing Cool Animations.</li></ul><p>While at work is more about getting the following objectives</p><ul><li>AWS Expertise</li></ul><p>For the Journaling System it could be the first COA of the day to be asigned automatically to journlaing</p><ul><li>[x] Create a Journaling Database</li></ul><p>Whats the idea of the Journaling system?</p><ul><li>The idea is that it</li></ul><p>I wonder if this idea of just submitting is the right way to go. Using Leetcode from just on the daily work. On that fashion you could grind both ways and use work to 100% focus on improving your algorithms while being 100% efficient and top of your game at work.</p><p>Your objective is to prepare for the next job. And you are doing it by doing the following:</p><ul><li>Daily lc</li><li>Daily Data Science Problems</li><li>Daily Design questions (COA)</li><li>Daily Practice with AWS Prompt problems.</li></ul><h2 id="_9-tuesday" tabindex="-1"><a class="header-anchor" href="#_9-tuesday"><span>9 - Tuesday</span></a></h2><h3 id="_9-todo" tabindex="-1"><a class="header-anchor" href="#_9-todo"><span>9.todo</span></a></h3><ul><li>[x] 9.1 Planningn</li></ul><h3 id="_9-1-planning" tabindex="-1"><a class="header-anchor" href="#_9-1-planning"><span>9.1 Planning</span></a></h3><p>This is an iteration of the previous idea.</p><ul><li>For LC try to solve a medium new, 1 Medium Old + ~7 Cloze problems</li><li>Also create a tracker for Jupyter problems.</li><li>You can honestly ignore the hard questions</li></ul><p>Could you perphaps doing the same with visualizations?</p><p>I think with that you should be having enough...</p><p>Like some kind of presentation master game where you have to find out which is the okayish way to re</p><p>Man, I had been practicing LC for a while, I know that this can be done, I am going to destroy the Algorithms class.</p><p>Now i need to start nailing that system design. I might not be</p><h2 id="_10-wednesday" tabindex="-1"><a class="header-anchor" href="#_10-wednesday"><span>10 - Wednesday</span></a></h2><h3 id="_10-todo" tabindex="-1"><a class="header-anchor" href="#_10-todo"><span>10.todo</span></a></h3><ul><li>[x] 10.1 Mixing of Algorithms</li><li>[ ] 10.2 Allow Reseeting</li></ul><h3 id="_10-1-mixing-of-algorithms" tabindex="-1"><a class="header-anchor" href="#_10-1-mixing-of-algorithms"><span>10.1 Mixing of Algorithms</span></a></h3><ol><li>We know tha twe can find this in the main menu page This is run whenever we are attempting to open a new CSES Session. Therefore we see the mixing but ONLY if there is no</li></ol><ul><li>Where is the Algorithms to find the if to create from zero is there?</li></ul><h3 id="_10-2-allow-for-resetting" tabindex="-1"><a class="header-anchor" href="#_10-2-allow-for-resetting"><span>10.2 Allow for Resetting</span></a></h3><ol><li>Adding resetting option for it, flag so that if detected, it will reset the progress of the algorithm.</li></ol><p>As long a sthe <code>reset_scheduler</code> is true:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>
<span class="token keyword">async</span> <span class="token function">setLearningCards</span><span class="token punctuation">(</span><span class="token parameter">cards<span class="token punctuation">,</span> <span class="token punctuation">{</span> cleanIfDifferent <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> onlyAddIfNotThere <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> loadLastCardsFirst <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> ask_if_to_use_old_queue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">,</span> reset_scheduler <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token operator">...</span><span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So now we have this working on the following:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>
<span class="token function-variable function">cloze_study_session</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>reset_scheduler <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

    <span class="token comment">// Pick all the available string keys.</span>

    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dsaTrainer<span class="token punctuation">.</span>loaded_problem_manager<span class="token punctuation">;</span>
    <span class="token keyword">const</span> cloze_problems <span class="token operator">=</span> cloze_problems_list<span class="token punctuation">;</span>
    <span class="token keyword">const</span> clozeScheduler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TermScheduler</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">cards_category</span><span class="token operator">:</span> <span class="token string">&quot;Algo&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> clozeScheduler<span class="token punctuation">.</span><span class="token function">setLearningCards</span><span class="token punctuation">(</span>cloze_problems<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">shuffle</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">reset_scheduler</span><span class="token operator">:</span> reset_scheduler<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> exit <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">printCardsLeft</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">cardsLeft<span class="token punctuation">,</span> cardsLearnt</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\nAlgorithms left: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>cardsLeft<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> || Algorithms completed: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>cardsLearnt<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\n</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>clozeScheduler<span class="token punctuation">.</span>is_completed <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>exit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token punctuation">[</span>cardsLeft<span class="token punctuation">,</span> cardsLearnt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>clozeScheduler<span class="token punctuation">.</span><span class="token function">getCardsToLearn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clozeScheduler<span class="token punctuation">.</span><span class="token function">getCardsLearnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">const</span> card <span class="token operator">=</span> <span class="token keyword">await</span> clozeScheduler<span class="token punctuation">.</span><span class="token function">getCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> problem <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dsaTrainer<span class="token punctuation">.</span>problems_manager<span class="token punctuation">.</span><span class="token function">getProblem</span><span class="token punctuation">(</span>card<span class="token punctuation">.</span>problem_slug<span class="token punctuation">)</span><span class="token punctuation">;</span>

        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Card&quot;</span><span class="token punctuation">,</span> card<span class="token punctuation">)</span><span class="token punctuation">;</span>
        problem<span class="token punctuation">.</span>is_cloze <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> solution_metadata <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dsaTrainer<span class="token punctuation">.</span><span class="token function">solveProblem</span><span class="token punctuation">(</span>problem<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">base</span><span class="token operator">:</span> DSAConstants<span class="token punctuation">.</span><span class="token constant">PATHS</span><span class="token punctuation">.</span>base_cloze<span class="token punctuation">,</span> <span class="token literal-property property">populate_with_cloze_filepath</span><span class="token operator">:</span> card<span class="token punctuation">.</span>file_path <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">const</span> answerIsCorrect <span class="token operator">=</span> solution_metadata<span class="token punctuation">.</span>status <span class="token operator">==</span> DSAConstants<span class="token punctuation">.</span>ProblemStatus<span class="token punctuation">.</span>solved<span class="token punctuation">;</span>
        clozeScheduler<span class="token punctuation">.</span><span class="token function">solveCard</span><span class="token punctuation">(</span>answerIsCorrect<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> clozeScheduler<span class="token punctuation">.</span><span class="token function">saveCards</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printCardsLeft</span><span class="token punctuation">(</span>cardsLeft<span class="token punctuation">,</span> cardsLearnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Adding for the January for them.</p><h4 id="is-it-always-forcing-the-reset" tabindex="-1"><a class="header-anchor" href="#is-it-always-forcing-the-reset"><span>Is it always forcing the reset?</span></a></h4><p>no, its just that it requires at least one problem to be solved in order to get to the next queue item.</p><h3 id="how-about" tabindex="-1"><a class="header-anchor" href="#how-about"><span>How about</span></a></h3><h3 id="wkout" tabindex="-1"><a class="header-anchor" href="#wkout"><span>wkout?</span></a></h3><ul><li>Yea</li><li>1 wonder if th3 r34s0n th4t h4ck3rs us3d to wr1t3 lik3 thi5 w4s bec4use th3y h0p3d to avoid d3t3cti0n wh3n th3ir m4anupscr1pts w3r3 t0 b3 f0und 0ut. 1 m3an it would be interesting if I could wr1te down my notes in j4p4n3s3 thoguh.</li></ul><h3 id="building-an-repetition-queue-for-problems" tabindex="-1"><a class="header-anchor" href="#building-an-repetition-queue-for-problems"><span>Building an Repetition Queue for Problems.</span></a></h3><ul><li>The main features would need to have a queue structure to store the problems.</li><li>Check how term scheduler is used to store this data in DSA Trainer.</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="QuizzerWithDSA"><pre class="language-javascript"><code>

    <span class="token function-variable function">cloze_study_session</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>reset_scheduler <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

        <span class="token comment">// Pick all the available string keys.</span>

        <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dsaTrainer<span class="token punctuation">.</span>loaded_problem_manager<span class="token punctuation">;</span>
        <span class="token keyword">const</span> cloze_problems <span class="token operator">=</span> cloze_problems_list<span class="token punctuation">;</span>
        <span class="token keyword">const</span> clozeScheduler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TermScheduler</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">cards_category</span><span class="token operator">:</span> <span class="token string">&quot;Algo&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> clozeScheduler<span class="token punctuation">.</span><span class="token function">setLearningCards</span><span class="token punctuation">(</span>cloze_problems<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">shuffle</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">reset_scheduler</span><span class="token operator">:</span> reset_scheduler<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> exit <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

        <span class="token keyword">const</span> <span class="token function-variable function">printCardsLeft</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">cardsLeft<span class="token punctuation">,</span> cardsLearnt</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\nAlgorithms left: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>cardsLeft<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> || Algorithms completed: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>cardsLearnt<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\n</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>clozeScheduler<span class="token punctuation">.</span>is_completed <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>exit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> <span class="token punctuation">[</span>cardsLeft<span class="token punctuation">,</span> cardsLearnt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>clozeScheduler<span class="token punctuation">.</span><span class="token function">getCardsToLearn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clozeScheduler<span class="token punctuation">.</span><span class="token function">getCardsLearnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

            <span class="token keyword">const</span> card <span class="token operator">=</span> <span class="token keyword">await</span> clozeScheduler<span class="token punctuation">.</span><span class="token function">getCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> problem <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dsaTrainer<span class="token punctuation">.</span>problems_manager<span class="token punctuation">.</span><span class="token function">getProblem</span><span class="token punctuation">(</span>card<span class="token punctuation">.</span>problem_slug<span class="token punctuation">)</span><span class="token punctuation">;</span>

            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Card&quot;</span><span class="token punctuation">,</span> card<span class="token punctuation">)</span><span class="token punctuation">;</span>
            problem<span class="token punctuation">.</span>is_cloze <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> solution_metadata <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dsaTrainer<span class="token punctuation">.</span><span class="token function">solveProblem</span><span class="token punctuation">(</span>problem<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">base</span><span class="token operator">:</span> DSAConstants<span class="token punctuation">.</span><span class="token constant">PATHS</span><span class="token punctuation">.</span>base_cloze<span class="token punctuation">,</span> <span class="token literal-property property">populate_with_cloze_filepath</span><span class="token operator">:</span> card<span class="token punctuation">.</span>file_path <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">const</span> answerIsCorrect <span class="token operator">=</span> solution_metadata<span class="token punctuation">.</span>status <span class="token operator">==</span> DSAConstants<span class="token punctuation">.</span>ProblemStatus<span class="token punctuation">.</span>solved<span class="token punctuation">;</span>
            clozeScheduler<span class="token punctuation">.</span><span class="token function">solveCard</span><span class="token punctuation">(</span>answerIsCorrect<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">await</span> clozeScheduler<span class="token punctuation">.</span><span class="token function">saveCards</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">printCardsLeft</span><span class="token punctuation">(</span>cardsLeft<span class="token punctuation">,</span> cardsLearnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here the side projects to start mantaining:</p><ul><li>Workout the following softwares: <ul><li>Java: Spring Backend</li><li>.Net C# Backend</li></ul></li></ul><p>each to mantain the following:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> <span class="token keyword">const</span> clozeScheduler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TermScheduler</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">cards_category</span><span class="token operator">:</span> <span class="token string">&quot;Algo&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> clozeScheduler<span class="token punctuation">.</span><span class="token function">setLearningCards</span><span class="token punctuation">(</span>cloze_problems<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">shuffle</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">reset_scheduler</span><span class="token operator">:</span> reset_scheduler<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> exit <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">printCardsLeft</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">cardsLeft<span class="token punctuation">,</span> cardsLearnt</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\nAlgorithms left: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>cardsLeft<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> || Algorithms completed: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>cardsLearnt<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\n</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>clozeScheduler<span class="token punctuation">.</span>is_completed <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>exit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token punctuation">[</span>cardsLeft<span class="token punctuation">,</span> cardsLearnt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>clozeScheduler<span class="token punctuation">.</span><span class="token function">getCardsToLearn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clozeScheduler<span class="token punctuation">.</span><span class="token function">getCardsLearnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">const</span> card <span class="token operator">=</span> <span class="token keyword">await</span> clozeScheduler<span class="token punctuation">.</span><span class="token function">getCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> problem <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dsaTrainer<span class="token punctuation">.</span>problems_manager<span class="token punctuation">.</span><span class="token function">getProblem</span><span class="token punctuation">(</span>card<span class="token punctuation">.</span>problem_slug<span class="token punctuation">)</span><span class="token punctuation">;</span>

        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Card&quot;</span><span class="token punctuation">,</span> card<span class="token punctuation">)</span><span class="token punctuation">;</span>
        problem<span class="token punctuation">.</span>is_cloze <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> solution_metadata <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dsaTrainer<span class="token punctuation">.</span><span class="token function">solveProblem</span><span class="token punctuation">(</span>problem<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">base</span><span class="token operator">:</span> DSAConstants<span class="token punctuation">.</span><span class="token constant">PATHS</span><span class="token punctuation">.</span>base_cloze<span class="token punctuation">,</span> <span class="token literal-property property">populate_with_cloze_filepath</span><span class="token operator">:</span> card<span class="token punctuation">.</span>file_path <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">const</span> answerIsCorrect <span class="token operator">=</span> solution_metadata<span class="token punctuation">.</span>status <span class="token operator">==</span> DSAConstants<span class="token punctuation">.</span>ProblemStatus<span class="token punctuation">.</span>solved<span class="token punctuation">;</span>
        clozeScheduler<span class="token punctuation">.</span><span class="token function">solveCard</span><span class="token punctuation">(</span>answerIsCorrect<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> clozeScheduler<span class="token punctuation">.</span><span class="token function">saveCards</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printCardsLeft</span><span class="token punctuation">(</span>cardsLeft<span class="token punctuation">,</span> cardsLearnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Fetch and use the TermScheduler for the cards category: \`\`</p><ul><li>Is missing how to add new cards.</li><li></li></ul><p>Actually I might just use this:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>
<span class="token keyword">class</span> <span class="token class-name">StorableQueue</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name <span class="token operator">=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>elements <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>absolute_uri <span class="token operator">=</span> <span class="token function">getDirAbsoluteUri</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">temp/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">async</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> <span class="token punctuation">{</span> JsonDB<span class="token punctuation">,</span> Config <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;node-json-db&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonDB</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>absolute_uri<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>elements <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">&#39;/elements&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Loaded </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> from </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> | </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>absolute_uri<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">async</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token punctuation">{</span> JsonDB<span class="token punctuation">,</span> Config <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;node-json-db&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonDB</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>absolute_uri<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        db<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/elements&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elements<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">cleanQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>elements <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">has</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elements<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// If not undefined</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">)</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>elements<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">enqueueMultiple</span><span class="token punctuation">(</span><span class="token parameter">elements</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> element <span class="token keyword">of</span> elements<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> item <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elements<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> item<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elements<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">get</span> <span class="token function">lastElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elements<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">get</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">get</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>    // decks.addDeck<span class="token punctuation">(</span>new TermStorage<span class="token punctuation">(</span>test, <span class="token string">&quot;test&quot;</span>, <span class="token punctuation">{</span>is_active: true<span class="token punctuation">}</span><span class="token punctuation">))</span><span class="token punctuation">;</span>
    const <span class="token punctuation">{</span> salesforce_experience <span class="token punctuation">}</span> <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">&#39;./salesforce_certification&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    decks.addDeck<span class="token punctuation">(</span>new TermStorage<span class="token punctuation">(</span>salesforce_experie<span class="token variable">$$</span>nce, <span class="token string">&quot;salesforce experience&quot;</span>, <span class="token punctuation">{</span> is_active: layer_2 <span class="token punctuation">}</span><span class="token punctuation">))</span><span class="token punctuation">;</span>

    const <span class="token punctuation">{</span> python, swift, js, dart, php, java, csharp, cpp, typescript, r, matlab, kotlin <span class="token punctuation">}</span> <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">&#39;./languages&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    decks.addDeck<span class="token punctuation">(</span>new TermStorage<span class="token punctuation">(</span>python, <span class="token string">&quot;python&quot;</span>, <span class="token punctuation">{</span> is_active: projects_layer <span class="token punctuation">}</span><span class="token punctuation">))</span><span class="token punctuation">;</span>
    decks.addDeck<span class="token punctuation">(</span>new TermStorage<span class="token punctuation">(</span>swift, <span class="token string">&quot;swift&quot;</span>, <span class="token punctuation">{</span> is_active: projects_layer <span class="token punctuation">}</span><span class="token punctuation">))</span><span class="token punctuation">;</span>
    decks.addDeck<span class="token punctuation">(</span>new TermStorage<span class="token punctuation">(</span>js, <span class="token string">&quot;js&quot;</span>, <span class="token punctuation">{</span> is_active: projects_layer <span class="token punctuation">}</span><span class="token punctuation">))</span><span class="token punctuation">;</span>
    decks.addDeck<span class="token punctuation">(</span>new TermStorage<span class="token punctuation">(</span>dart, <span class="token string">&quot;dart&quot;</span>, <span class="token punctuation">{</span> is_active: projects_layer <span class="token punctuation">}</span><span class="token punctuation">))</span><span class="token punctuation">;</span>
    decks.addDeck<span class="token punctuation">(</span>new TermStorage<span class="token punctuation">(</span>php, <span class="token string">&quot;php&quot;</span>, <span class="token punctuation">{</span> is_active: projects_layer <span class="token punctuation">}</span><span class="token punctuation">))</span><span class="token punctuation">;</span>
    decks.addDeck<span class="token punctuation">(</span>new TermStorage<span class="token punctuation">(</span>java, <span class="token string">&quot;java&quot;</span>, <span class="token punctuation">{</span> is_active: projects_layer <span class="token punctuation">}</span><span class="token punctuation">))</span><span class="token punctuation">;</span>
    decks.addDeck<span class="token punctuation">(</span>new TermStorage<span class="token punctuation">(</span>csharp, <span class="token string">&quot;csharp&quot;</span>, <span class="token punctuation">{</span> is_active: projects_layer <span class="token punctuation">}</span><span class="token punctuation">))</span><span class="token punctuation">;</span>
    decks.addDeck<span class="token punctuation">(</span>new TermStorage<span class="token punctuation">(</span>cpp, <span class="token string">&quot;cpp&quot;</span>, <span class="token punctuation">{</span> is_active: projects_layer <span class="token punctuation">}</span><span class="token punctuation">))</span><span class="token punctuation">;</span>
    decks.addDeck<span class="token punctuation">(</span>new TermStorage<span class="token punctuation">(</span>typescript, <span class="token string">&quot;typescript&quot;</span>, <span class="token punctuation">{</span> is_active: projects_layer <span class="token punctuation">}</span><span class="token punctuation">))</span><span class="token punctuation">;</span>
    decks.addDeck<span class="token punctuation">(</span>new TermStorage<span class="token punctuation">(</span>r, <span class="token string">&quot;r&quot;</span>, <span class="token punctuation">{</span> is_active: projects_layer <span class="token punctuation">}</span><span class="token punctuation">))</span><span class="token punctuation">;</span>
    decks.addDeck<span class="token punctuation">(</span>new TermStorage<span class="token punctuation">(</span>matlab, <span class="token string">&quot;matlab&quot;</span>, <span class="token punctuation">{</span> is_active: projects_layer <span class="token punctuation">}</span><span class="token punctuation">))</span><span class="token punctuation">;</span>
    decks.addDeck<span class="token punctuation">(</span>new TermStorage<span class="token punctuation">(</span>kotlin, <span class="token string">&quot;kotlin&quot;</span>, <span class="token punctuation">{</span> is_active: projects_layer <span class="token punctuation">}</span><span class="token punctuation">))</span><span class="token punctuation">;</span>


<span class="token builtin class-name">return</span> decks<span class="token punctuation">;</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note the <code>return decks;</code></p><p>From here you can view that the decks returned are: \`\`</p><p>Therefore I can jsut use the property: <code>decks</code> i order to fetch the count:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>

<span class="token doc-comment comment">/**
 * Follows Composition Pattern, it should be able to store other Term Storages, turn them on and off
 */</span>
<span class="token keyword">class</span> <span class="token class-name">TermStorage</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * Initialization, by default TermStorage is acitve.
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>List<span class="token punctuation">[</span>JsonText<span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">terms</span> Terms to be added to this deck
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">deck_name</span> The deckname, optional if is the parent deckname
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>List<span class="token punctuation">[</span>TermStorage<span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">decks</span> The decks required for the Storages
     */</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>terms <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> deck_name <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> decks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> is_active <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>terms <span class="token operator">=</span> terms<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>deck_name <span class="token operator">=</span> deck_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="adding-the-correct-quiz-settings" tabindex="-1"><a class="header-anchor" href="#adding-the-correct-quiz-settings"><span>Adding the correct Quiz Settings</span></a></h2><p>This is how the settings are being used</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>
<span class="token keyword">if</span> <span class="token punctuation">(</span>Settings<span class="token operator">?.</span>report_show<span class="token operator">?.</span>performance_summary<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Performance Report: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>todaydate<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">performanceReport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Is there any language to know their weird features? For example <code>c++</code> and how they work? How did you even get to this point in <code>js</code>? By doing couple of leetcode and projects. For that is clear that you need a language to be at least fun to play around. For <code>C++</code> I cna only seem myself improving through <code>Arduino</code>? While at least for <code>C#</code> I can get good at it because of Unity. While <code>Java</code> goes to the trash. Its just an horrible language omg.</p><p>Here a couple of languages that are used. Except for <code>js</code> and <code>py</code>. (Since I believe I have achieved significant proficiency with them. After working with them so fluently)</p><p>This is to decide which languages to work on next:</p><table><thead><tr><th>Language</th><th>Projects</th><th>Job Hunt</th><th>LC</th><th>X</th></tr></thead><tbody><tr><td>Flutter(D)</td><td>8</td><td>2</td><td></td><td>X</td></tr><tr><td>PHP</td><td>6</td><td>6</td><td>X</td><td></td></tr><tr><td>Java</td><td>3</td><td>8</td><td>X</td><td></td></tr><tr><td>Swift</td><td>7</td><td>7</td><td>X</td><td>X</td></tr><tr><td>Kotlin</td><td>7</td><td>7</td><td>X</td><td></td></tr><tr><td>Sql</td><td>10</td><td>10</td><td></td><td>X</td></tr><tr><td>C#</td><td>8</td><td>8</td><td>X</td><td>X</td></tr><tr><td>C++</td><td>6</td><td>6</td><td></td><td></td></tr></tbody></table><p>The thing about Kotlin and Swift languages is that they are barely usable only for their specific niche. Althought if I were to develop on Swift or Kotlin, I should spend more</p><ul><li>For <code>C++</code> I can use it for Arduino, but also for Unreal Engine. As for job hunts it seems to appear every so often, but then they will likely to be asking for embedding systems and then you would be competiing with Electronic engineers to the mix.</li><li>For <code>C#</code> I can use it for Unity, but also for .Net. As for job hunts it seems to appear every so often. =&gt; <strong>GOOD</strong></li><li>For <code>Java</code> I can use it for Android, but also for Spring. Howver both of them are a second option. As you have already many other languages that support such.</li><li>For <code>PHP</code> I can use it for Laravel, but also for Wordpress. As for job hunts it seems to appear every so often. =&gt; <strong>GOOD</strong></li><li>I am already building a couple of projects in Flutter so I might as well continue improving it&#39;s syntaxt.</li><li>For <code>Sql</code> is an absolute must. =&gt; <strong>GOOD</strong></li></ul><h2 id="_14-sunday" tabindex="-1"><a class="header-anchor" href="#_14-sunday"><span>14 - Sunday</span></a></h2><div class="language-dart line-numbers-mode" data-ext="dart" data-title="dart"><pre class="language-dart"><code><span class="token function">loginButton</span><span class="token punctuation">(</span>
    textLabel<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Login as Demo&quot;</span></span><span class="token punctuation">,</span>
    onTapButton<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token comment">// It does make sense to run the login and sync logic here first. and then also return True false whether it is ready for logging in.</span>
    <span class="token keyword">final</span> <span class="token class-name">Database</span> db <span class="token operator">=</span> <span class="token class-name">Database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> loginResponse <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>
        email<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;wangnelson4@gmail.com&quot;</span></span><span class="token punctuation">,</span> password<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;test123&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>loginResponse<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
        context<span class="token punctuation">,</span>
        <span class="token class-name">MaterialPageRoute</span><span class="token punctuation">(</span>
            builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">DrawerOpenScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It seems to me also, that there is no response beign corrected to push into the navigator</p><p>Great awesome that actually worked just fine.</p>`,160),p=[o];function i(l,c){return s(),a("div",null,p)}const r=n(e,[["render",i],["__file","24-1-jan.html.vue"]]),d=JSON.parse('{"path":"/posts/journal/24-1-jan.html","title":"January 2024","lang":"en-US","frontmatter":{"title":"January 2024"},"headers":[{"level":3,"title":"05 - Fri","slug":"_05-fri","link":"#_05-fri","children":[]},{"level":3,"title":"5.todo","slug":"_5-todo","link":"#_5-todo","children":[]},{"level":3,"title":"5.2 Identifying the co-beneffited areas","slug":"_5-2-identifying-the-co-beneffited-areas","link":"#_5-2-identifying-the-co-beneffited-areas","children":[]},{"level":3,"title":"5.1 Improving the Mastery System","slug":"_5-1-improving-the-mastery-system","link":"#_5-1-improving-the-mastery-system","children":[]},{"level":3,"title":"5.3 Identifying what are the procedures to follow for the mastery of each item.","slug":"_5-3-identifying-what-are-the-procedures-to-follow-for-the-mastery-of-each-item","link":"#_5-3-identifying-what-are-the-procedures-to-follow-for-the-mastery-of-each-item","children":[]},{"level":3,"title":"5.4 How about the long term web design objectives?","slug":"_5-4-how-about-the-long-term-web-design-objectives","link":"#_5-4-how-about-the-long-term-web-design-objectives","children":[]},{"level":3,"title":"Todays and this weekends plan of actions:","slug":"todays-and-this-weekends-plan-of-actions","link":"#todays-and-this-weekends-plan-of-actions","children":[]},{"level":3,"title":"5.5 Working on designing the Jupyter Notebook series practice","slug":"_5-5-working-on-designing-the-jupyter-notebook-series-practice","link":"#_5-5-working-on-designing-the-jupyter-notebook-series-practice","children":[]},{"level":2,"title":"5.6 Start designing the project to record the presentation practicing project","slug":"_5-6-start-designing-the-project-to-record-the-presentation-practicing-project","link":"#_5-6-start-designing-the-project-to-record-the-presentation-practicing-project","children":[{"level":3,"title":"Designing the Trello Cards Built Site","slug":"designing-the-trello-cards-built-site","link":"#designing-the-trello-cards-built-site","children":[]},{"level":3,"title":"Design Page for Your own Performance Section","slug":"design-page-for-your-own-performance-section","link":"#design-page-for-your-own-performance-section","children":[]}]},{"level":2,"title":"8th - Monday","slug":"_8th-monday","link":"#_8th-monday","children":[{"level":3,"title":"8.todo","slug":"_8-todo","link":"#_8-todo","children":[]},{"level":3,"title":"8.1 Evuating Journaling system","slug":"_8-1-evuating-journaling-system","link":"#_8-1-evuating-journaling-system","children":[]}]},{"level":2,"title":"9 - Tuesday","slug":"_9-tuesday","link":"#_9-tuesday","children":[{"level":3,"title":"9.todo","slug":"_9-todo","link":"#_9-todo","children":[]},{"level":3,"title":"9.1 Planning","slug":"_9-1-planning","link":"#_9-1-planning","children":[]}]},{"level":2,"title":"10 - Wednesday","slug":"_10-wednesday","link":"#_10-wednesday","children":[{"level":3,"title":"10.todo","slug":"_10-todo","link":"#_10-todo","children":[]},{"level":3,"title":"10.1 Mixing of Algorithms","slug":"_10-1-mixing-of-algorithms","link":"#_10-1-mixing-of-algorithms","children":[]},{"level":3,"title":"10.2 Allow for Resetting","slug":"_10-2-allow-for-resetting","link":"#_10-2-allow-for-resetting","children":[]},{"level":3,"title":"How about","slug":"how-about","link":"#how-about","children":[]},{"level":3,"title":"wkout?","slug":"wkout","link":"#wkout","children":[]},{"level":3,"title":"Building an Repetition Queue for Problems.","slug":"building-an-repetition-queue-for-problems","link":"#building-an-repetition-queue-for-problems","children":[]}]},{"level":2,"title":"Adding the correct Quiz Settings","slug":"adding-the-correct-quiz-settings","link":"#adding-the-correct-quiz-settings","children":[]},{"level":2,"title":"14 - Sunday","slug":"_14-sunday","link":"#_14-sunday","children":[]}],"git":{"updatedTime":1710098392000,"contributors":[{"name":"NelsonWang","email":"wangnelson2@gmail.com","commits":1}]},"filePathRelative":"posts/journal/24-1-jan.md","excerpt":"<h3>05 - Fri</h3>\\n<p>I cant believe it, I am back.</p>\\n<ul>\\n<li>A lot of stuff happened. What I am hopping to do is to take the largest share of advantage from the point I am in right now. And focus to learn and improve on the areas that appear to most significantly tbe improving upon my career. I gonna also make sure that the Mastery system is or will be also improved to the point I can confintly run the practce problems.</li>\\n</ul>"}');export{r as comp,d as data};
